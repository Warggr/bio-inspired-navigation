import matplotlib.pyplot as plt
import math
from . import parametersBC, subroutines
import numpy as np
import matplotlib, time

#iss the same as polarBCplotter but plotts all 20 TR layers
class BCplotterAllLayers:
    '''
    basically same as @polarBCplotter.py but takes all the 20 tr layers and plots them
    '''
    def __init__(self):
        plt.ion()
        self.egocentricActivity = np.zeros((51, 16))
        self.bvcActivity = np.zeros((51, 16))
        self.tr1activity = np.zeros((51, 16))
        self.tr2activity = np.zeros((51, 16))
        self.tr3activity = np.zeros((51, 16))
        self.tr4activity = np.zeros((51, 16))
        self.tr5activity = np.zeros((51, 16))
        self.tr6activity = np.zeros((51, 16))
        self.tr7activity = np.zeros((51, 16))
        self.tr8activity = np.zeros((51, 16))
        self.tr9activity = np.zeros((51, 16))
        self.tr10activity = np.zeros((51, 16))
        self.tr11activity = np.zeros((51, 16))
        self.tr12activity = np.zeros((51, 16))
        self.tr13activity = np.zeros((51, 16))
        self.tr14activity = np.zeros((51, 16))
        self.tr15activity = np.zeros((51, 16))
        self.tr16activity = np.zeros((51, 16))
        self.tr17activity = np.zeros((51, 16))
        self.tr18activity = np.zeros((51, 16))
        self.tr19activity = np.zeros((51, 16))
        self.tr20activity = np.zeros((51, 16))
        self.decodedDir = 0.0
        # bvc = np.reshape(bvcActivity, (16, 51))

        # TODO
        self.angular = np.linspace(0, 2 * math.pi, 51)  # - parametersBC.polarAngularResolution
        self.radial = subroutines.radialScaling()

        R, P = np.meshgrid(self.radial, self.angular)

        self.fig = plt.figure(figsize=(12.8, 9.6))

        self.ax1 = plt.subplot2grid((5, 5), (0, 0), projection='3d')
        self.ax1.title.set_text("egocentric Layer, decoded Direction: " + str(round((180 / math.pi) * self.decodedDir, 1)) + "°")
        self.ax1.axis('off')
        self.ax2 = plt.subplot2grid((5, 5), (0, 4), projection='3d')
        self.ax2.title.set_text("BVC Layer")
        self.ax2.axis('off')
        self.ax3 = plt.subplot2grid((5, 5), (1, 0), projection='3d')
        self.ax3.title.set_text("Layer 1: " + str(round((180/math.pi) * parametersBC.transformationAngles[0], 1))+"°")
        self.ax3.axis('off')
        self.ax4 = plt.subplot2grid((5, 5), (1, 1), projection='3d')
        self.ax4.title.set_text("Layer 2: " + str(round((180/math.pi) * parametersBC.transformationAngles[1], 1))+"°")
        self.ax4.axis('off')
        self.ax5 = plt.subplot2grid((5, 5), (1, 2), projection='3d')
        self.ax5.title.set_text("Layer 3: " + str(round((180/math.pi) * parametersBC.transformationAngles[2], 1))+"°")
        self.ax5.axis('off')
        self.ax6 = plt.subplot2grid((5, 5), (1, 3), projection='3d')
        self.ax6.title.set_text("Layer 4: " + str(round((180/math.pi) * parametersBC.transformationAngles[3], 1))+"°")
        self.ax6.axis('off')
        self.ax7 = plt.subplot2grid((5, 5), (1, 4), projection='3d')
        self.ax7.title.set_text("Layer 5: " + str(round((180/math.pi) * parametersBC.transformationAngles[4], 1))+"°")
        self.ax7.axis('off')
        self.ax8 = plt.subplot2grid((5, 5), (2, 0), projection='3d')
        self.ax8.title.set_text("Layer 6: " + str(round((180/math.pi) * parametersBC.transformationAngles[5], 1))+"°")
        self.ax8.axis('off')
        self.ax9 = plt.subplot2grid((5, 5), (2, 1), projection='3d')
        self.ax9.title.set_text("Layer 7: " + str(round((180/math.pi) * parametersBC.transformationAngles[6], 1))+"°")
        self.ax9.axis('off')
        self.ax10 = plt.subplot2grid((5, 5), (2, 2), projection='3d')
        self.ax10.title.set_text("Layer 8: " + str(round((180/math.pi) * parametersBC.transformationAngles[7], 1))+"°")
        self.ax10.axis('off')
        self.ax11 = plt.subplot2grid((5, 5), (2, 3), projection='3d')
        self.ax11.title.set_text("Layer 9: " + str(round((180/math.pi) * parametersBC.transformationAngles[8], 1))+"°")
        self.ax11.axis('off')
        self.ax12 = plt.subplot2grid((5, 5), (2, 4), projection='3d')
        self.ax12.title.set_text("Layer 10: " + str(round((180/math.pi) * parametersBC.transformationAngles[9], 1))+"°")
        self.ax12.axis('off')
        self.ax13 = plt.subplot2grid((5, 5), (3, 0), projection='3d')
        self.ax13.title.set_text("Layer 11: " + str(round((180/math.pi) * parametersBC.transformationAngles[10], 1))+"°")
        self.ax13.axis('off')
        self.ax14 = plt.subplot2grid((5, 5), (3, 1), projection='3d')
        self.ax14.title.set_text("Layer 12: " + str(round((180/math.pi) * parametersBC.transformationAngles[11], 1))+"°")
        self.ax14.axis('off')
        self.ax15 = plt.subplot2grid((5, 5), (3, 2), projection='3d')
        self.ax15.title.set_text("Layer 13: " + str(round((180/math.pi) * parametersBC.transformationAngles[12], 1))+"°")
        self.ax15.axis('off')
        self.ax16 = plt.subplot2grid((5, 5), (3, 3), projection='3d')
        self.ax16.title.set_text("Layer 14: " + str(round((180/math.pi) * parametersBC.transformationAngles[13], 1))+"°")
        self.ax16.axis('off')
        self.ax17 = plt.subplot2grid((5, 5), (3, 4), projection='3d')
        self.ax17.title.set_text("Layer 15: " + str(round((180/math.pi) * parametersBC.transformationAngles[14], 1))+"°")
        self.ax17.axis('off')
        self.ax18 = plt.subplot2grid((5, 5), (4, 0), projection='3d')
        self.ax18.title.set_text("Layer 16: " + str(round((180/math.pi) * parametersBC.transformationAngles[15], 1))+"°")
        self.ax18.axis('off')
        self.ax19 = plt.subplot2grid((5, 5), (4, 1), projection='3d')
        self.ax19.title.set_text("Layer 17: " + str(round((180/math.pi) * parametersBC.transformationAngles[16], 1))+"°")
        self.ax19.axis('off')
        self.ax20 = plt.subplot2grid((5, 5), (4, 2), projection='3d')
        self.ax20.title.set_text("Layer 18: " + str(round((180/math.pi) * parametersBC.transformationAngles[17], 1))+"°")
        self.ax20.axis('off')
        self.ax21 = plt.subplot2grid((5, 5), (4, 3), projection='3d')
        self.ax21.title.set_text("Layer 19: " + str(round((180/math.pi) * parametersBC.transformationAngles[18], 1))+"°")
        self.ax21.axis('off')
        self.ax22 = plt.subplot2grid((5, 5), (4, 4), projection='3d')
        self.ax22.title.set_text("Layer 20: " + str(round((180/math.pi) * parametersBC.transformationAngles[19], 1))+"°")
        self.ax22.axis('off')

        # Express the mesh in the cartesian system.
        self.X, self.Y = R * np.cos(P), R * np.sin(P)
        # Plot the surface.

        self.surface1 = self.ax1.plot_surface(self.X, self.Y, self.egocentricActivity, cmap="magma", antialiased=False)
        self.surface2 = self.ax2.plot_surface(self.X, self.Y, self.bvcActivity, cmap='magma', antialiased=False)
        self.surface3 = self.ax3.plot_surface(self.X, self.Y, self.tr1activity, cmap="magma", antialiased=False)
        self.surface4 = self.ax4.plot_surface(self.X, self.Y, self.tr2activity, cmap='magma', antialiased=False)
        self.surface5 = self.ax5.plot_surface(self.X, self.Y, self.tr3activity, cmap="magma", antialiased=False)
        self.surface6 = self.ax6.plot_surface(self.X, self.Y, self.tr4activity, cmap='magma', antialiased=False)
        self.surface7 = self.ax7.plot_surface(self.X, self.Y, self.tr5activity, cmap="magma", antialiased=False)
        self.surface8 = self.ax8.plot_surface(self.X, self.Y, self.tr6activity, cmap='magma', antialiased=False)
        self.surface9 = self.ax9.plot_surface(self.X, self.Y, self.tr7activity, cmap="magma", antialiased=False)
        self.surface10 = self.ax10.plot_surface(self.X, self.Y, self.tr8activity, cmap='magma', antialiased=False)
        self.surface11 = self.ax11.plot_surface(self.X, self.Y, self.tr9activity, cmap="magma", antialiased=False)
        self.surface12 = self.ax12.plot_surface(self.X, self.Y, self.tr10activity, cmap='magma', antialiased=False)
        self.surface13 = self.ax13.plot_surface(self.X, self.Y, self.tr11activity, cmap="magma", antialiased=False)
        self.surface14 = self.ax14.plot_surface(self.X, self.Y, self.tr12activity, cmap='magma', antialiased=False)
        self.surface15 = self.ax15.plot_surface(self.X, self.Y, self.tr13activity, cmap="magma", antialiased=False)
        self.surface16 = self.ax16.plot_surface(self.X, self.Y, self.tr14activity, cmap='magma', antialiased=False)
        self.surface17 = self.ax17.plot_surface(self.X, self.Y, self.tr15activity, cmap="magma", antialiased=False)
        self.surface18 = self.ax18.plot_surface(self.X, self.Y, self.tr16activity, cmap='magma', antialiased=False)
        self.surface19 = self.ax19.plot_surface(self.X, self.Y, self.tr17activity, cmap="magma", antialiased=False)
        self.surface20 = self.ax20.plot_surface(self.X, self.Y, self.tr18activity, cmap='magma', antialiased=False)
        self.surface21 = self.ax21.plot_surface(self.X, self.Y, self.tr19activity, cmap="magma", antialiased=False)
        self.surface22 = self.ax22.plot_surface(self.X, self.Y, self.tr20activity, cmap='magma', antialiased=False)


        self.ax1.set_zlim(0, 1)
        self.ax2.set_zlim(0, 1)
        self.ax3.set_zlim(0, 1)
        self.ax4.set_zlim(0, 1)
        self.ax1.view_init(90, 180)
        self.ax2.view_init(90, 180)
        self.ax3.view_init(90, 180)
        self.ax4.view_init(90, 180)
        self.ax5.view_init(90, 180)
        self.ax6.view_init(90, 180)
        self.ax7.view_init(90, 180)
        self.ax8.view_init(90, 180)
        self.ax9.view_init(90, 180)
        self.ax10.view_init(90, 180)
        self.ax11.view_init(90, 180)
        self.ax12.view_init(90, 180)
        self.ax13.view_init(90, 180)
        self.ax14.view_init(90, 180)
        self.ax15.view_init(90, 180)
        self.ax16.view_init(90, 180)
        self.ax17.view_init(90, 180)
        self.ax18.view_init(90, 180)
        self.ax19.view_init(90, 180)
        self.ax20.view_init(90, 180)
        self.ax21.view_init(90, 180)

        self.ax22.view_init(70, 180)

        plt.show()

    def bcPlotting(self, egocentricAct, bvcAct, tr1act, tr2act, tr3act, tr4act, tr5act, tr6act, tr7act, tr8act, tr9act,
                   tr10act, tr11act, tr12act, tr13act, tr14act, tr15act, tr16act, tr17act, tr18act, tr19act, tr20act, decodedDir):
        self.surface1.remove()
        self.surface2.remove()
        self.surface3.remove()
        self.surface4.remove()
        self.surface5.remove()
        self.surface6.remove()
        self.surface7.remove()
        self.surface8.remove()
        self.surface9.remove()
        self.surface10.remove()
        self.surface11.remove()
        self.surface12.remove()
        self.surface13.remove()
        self.surface14.remove()
        self.surface15.remove()
        self.surface16.remove()
        self.surface17.remove()
        self.surface18.remove()
        self.surface19.remove()
        self.surface20.remove()
        self.surface21.remove()
        self.surface22.remove()

        self.egocentricActivity = np.reshape(egocentricAct, (51, 16))
        self.bvcActivity = np.reshape(bvcAct, (51, 16))
        self.tr1activity = np.reshape(tr1act, (51, 16))
        self.tr2activity = np.reshape(tr2act, (51, 16))
        self.tr3activity = np.reshape(tr3act, (51, 16))
        self.tr4activity = np.reshape(tr4act, (51, 16))
        self.tr5activity = np.reshape(tr5act, (51, 16))
        self.tr6activity = np.reshape(tr6act, (51, 16))
        self.tr7activity = np.reshape(tr7act, (51, 16))
        self.tr8activity = np.reshape(tr8act, (51, 16))
        self.tr9activity = np.reshape(tr9act, (51, 16))

        self.tr10activity = np.reshape(tr10act, (51, 16))
        self.tr11activity = np.reshape(tr11act, (51, 16))
        self.tr12activity = np.reshape(tr12act, (51, 16))
        self.tr13activity = np.reshape(tr13act, (51, 16))
        self.tr14activity = np.reshape(tr14act, (51, 16))
        self.tr15activity = np.reshape(tr15act, (51, 16))
        self.tr16activity = np.reshape(tr16act, (51, 16))
        self.tr17activity = np.reshape(tr17act, (51, 16))
        self.tr18activity = np.reshape(tr18act, (51, 16))
        self.tr19activity = np.reshape(tr19act, (51, 16))
        self.tr20activity = np.reshape(tr20act, (51, 16))

        self.surface1 = self.ax1.plot_surface(self.X, self.Y, self.egocentricActivity, cmap="magma")
        self.ax1.title.set_text(
            "egocentric Layer, decoded Direction: " + str(round((180 / math.pi) * decodedDir, 1)) + "°")
        self.surface2 = self.ax2.plot_surface(self.X, self.Y, self.bvcActivity, cmap="magma")
        self.surface3 = self.ax3.plot_surface(self.X, self.Y, self.tr1activity, cmap="magma")
        self.surface4 = self.ax4.plot_surface(self.X, self.Y, self.tr2activity, cmap="magma")
        self.surface5 = self.ax5.plot_surface(self.X, self.Y, self.tr3activity, cmap="magma")
        self.surface6 = self.ax6.plot_surface(self.X, self.Y, self.tr4activity, cmap="magma")
        self.surface7 = self.ax7.plot_surface(self.X, self.Y, self.tr5activity, cmap="magma")
        self.surface8 = self.ax8.plot_surface(self.X, self.Y, self.tr6activity, cmap="magma")
        self.surface9 = self.ax9.plot_surface(self.X, self.Y, self.tr7activity, cmap="magma")
        self.surface10 = self.ax10.plot_surface(self.X, self.Y, self.tr8activity, cmap="magma")
        self.surface11 = self.ax11.plot_surface(self.X, self.Y, self.tr9activity, cmap="magma")
        self.surface12 = self.ax12.plot_surface(self.X, self.Y, self.tr10activity, cmap="magma")
        self.surface13 = self.ax13.plot_surface(self.X, self.Y, self.tr11activity, cmap="magma")
        self.surface14 = self.ax14.plot_surface(self.X, self.Y, self.tr12activity, cmap="magma")
        self.surface15 = self.ax15.plot_surface(self.X, self.Y, self.tr13activity, cmap="magma")
        self.surface16 = self.ax16.plot_surface(self.X, self.Y, self.tr14activity, cmap="magma")
        self.surface17 = self.ax17.plot_surface(self.X, self.Y, self.tr15activity, cmap="magma")
        self.surface18 = self.ax18.plot_surface(self.X, self.Y, self.tr16activity, cmap="magma")
        self.surface19 = self.ax19.plot_surface(self.X, self.Y, self.tr17activity, cmap="magma")
        self.surface20 = self.ax20.plot_surface(self.X, self.Y, self.tr18activity, cmap="magma")
        self.surface21 = self.ax21.plot_surface(self.X, self.Y, self.tr19activity, cmap="magma")
        self.surface22 = self.ax22.plot_surface(self.X, self.Y, self.tr20activity, cmap="magma")

        plt.draw()

        self.fig.canvas.flush_events()
        time.sleep(0.01)
